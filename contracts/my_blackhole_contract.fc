#include "imports/stdlib.fc";

;; what this contract does:
;; 1) stores counter_value (can be incremented using opcode=1)
;; 2) stored recent_inc_addr (wallet address that was the last which sent increment command)
;; 3) automatically deposits incoming tons onto its balance (it's the default behavior)
;; 4) withdraws its balance (opcode=3) to owner's wallet
;;    (owner's wallet address is unchanged, it must be set as initial data when deploying the contract)

const MIN_TONS_SHOULD_BE_LEFT_AFTER_WITHDRAW = 10000000; ;; 0.01 TON

const ERR_WITHDRAW_ACCESS_DENIED = 777;
const ERR_WITHDRAW_NOT_ENOUGH_MONEY = 778;
const ERR_UNKNOWN_OPCODE = 780;

() my_store_data(int counter_value, slice recent_inc_addr, slice recent_deposit_addr, slice owner_addr) impure inline {
    set_data(
        begin_cell()
        .store_uint(counter_value, 32)
        .store_slice(recent_inc_addr)
        .store_slice(recent_deposit_addr)
        .store_slice(owner_addr)
        .end_cell()
    );
}

(int, slice, slice, slice) my_load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_uint(32), ;; counter_value
        ds~load_msg_addr(), ;; recent_inc_addr
        ds~load_msg_addr(), ;; recent_deposit_addr
        ds~load_msg_addr()  ;; owner_addr
    );
}

() recv_internal(int msg_value, cell in_msg, slice in_msg_body) impure {
    slice cs = in_msg.begin_parse();
    int flags = cs~load_uint(4);
    slice sender_addr = cs~load_msg_addr();

    int opcode = in_msg_body~load_uint(32);

    var (counter_value, recent_inc_addr, recent_deposit_addr, owner_addr) = my_load_data();

    ;; increment by provided value
    if (opcode == 1) {
        int inc_by = in_msg_body~load_uint(32);
        my_store_data(counter_value + inc_by, sender_addr, recent_deposit_addr, owner_addr);
        ;; note, that all unused gas is collected in this contract's balance
        ;; todo: learn how to return back unused gas
        return ();
    }

    ;; deposit the sent amount to contract's balance
    if (opcode == 2) {
        ;; nothing to implement: it's done automatically when finished with success
        my_store_data(counter_value, recent_inc_addr, sender_addr, owner_addr);
        return ();
    }

    ;; withdraw provided value of coins
    if (opcode == 3) {
        throw_unless(ERR_WITHDRAW_ACCESS_DENIED, equal_slice_bits(sender_addr, owner_addr));
        int to_withdraw = in_msg_body~load_coins();
        var [balance, _] = get_balance();
        int max_to_withdraw = balance - MIN_TONS_SHOULD_BE_LEFT_AFTER_WITHDRAW;
        throw_if(ERR_WITHDRAW_NOT_ENOUGH_MONEY, to_withdraw > max_to_withdraw);

        ;; send money to owner
        cell msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(owner_addr)
        .store_coins(to_withdraw)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .end_cell();

        send_raw_message(msg, 1);
        return ();
    }

    throw(ERR_UNKNOWN_OPCODE);
}

(int, slice, slice, slice) dump_full_state() method_id {
    return my_load_data();  ;; see comments in my_load_data()
}

int show_balance() method_id {
    var [balance, _] = get_balance();
    return balance;
}
